name: Build Rocket Chat and pack to Docker image master

on: [workflow_dispatch]

env:
  CI: true
  # MONGO_URL: mongodb://localhost:27017
  TOOL_NODE_FLAGS: --max_old_space_size=4096
  
jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - name: Github Info
        run: |
          echo "GITHUB_ACTION: $GITHUB_ACTION"
          echo "GITHUB_ACTOR: $GITHUB_ACTOR"
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_HEAD_REF: $GITHUB_HEAD_REF"
          echo "GITHUB_BASE_REF: $GITHUB_BASE_REF"
          echo "github.event_name: ${{ github.event_name }}"
          cat $GITHUB_EVENT_PATH
      - name: Use Node.js 14.18.3
        uses: actions/setup-node@v3
        with:
          node-version: '14.18.3'

      - uses: actions/checkout@v3

      - name: Free disk space
        run: |
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo apt clean
          df -h
        #  docker rmi $(docker image ls -aq)
          
      - name: check package-lock
        run: |
          npx package-lock-check
          
      # - name: Cache cypress
      #   id: cache-cypress
      #   uses: actions/cache@v2
      #   with:
      #     path: /home/runner/.cache/Cypress
      #     key: ${{ runner.OS }}-cache-cypress-${{ hashFiles('**/package-lock.json', '.github/workflows/build_and_test.yml') }}

      # - name: Cache node modules
      #   id: cache-nodemodules
      #   uses: actions/cache@v2
      #   with:
      #     path: |
      #       ./node_modules
      #       ./ee/server/services/node_modules
      #     key: ${{ runner.OS }}-node_modules-4-${{ hashFiles('**/package-lock.json', '.github/workflows/build_and_test.yml') }}

      - name: Cache meteor local
        uses: actions/cache@v2
        with:
          path: ./.meteor/local
          key: ${{ runner.OS }}-meteor_cache-${{ hashFiles('.meteor/versions', '.github/workflows/build_and_test.yml') }}

      - name: Cache meteor
        uses: actions/cache@v2
        with:
          path: ~/.meteor
          key: ${{ runner.OS }}-meteor-${{ hashFiles('.meteor/release', '.github/workflows/build_and_test.yml') }}

      - name: Install Meteor
        run: |
          # Restore bin from cache
          set +e
          METEOR_SYMLINK_TARGET=$(readlink ~/.meteor/meteor)
          METEOR_TOOL_DIRECTORY=$(dirname "$METEOR_SYMLINK_TARGET")
          set -e
          LAUNCHER=$HOME/.meteor/$METEOR_TOOL_DIRECTORY/scripts/admin/launch-meteor
          if [ -e $LAUNCHER ]
          then
            echo "Cached Meteor bin found, restoring it"
            sudo cp "$LAUNCHER" "/usr/local/bin/meteor"
          else
            echo "No cached Meteor bin found."
          fi
          # only install meteor if bin isn't found
          command -v meteor >/dev/null 2>&1 || curl https://install.meteor.com | sed s/--progress-bar/-sL/g | /bin/sh
          
      - name: Versions
        run: |
          npm --versions
          node -v
          meteor --version
          meteor npm --versions
          meteor node -v
          git version
          
      - name: npm install
        # if: steps.cache-nodemodules.outputs.cache-hit != 'true' || steps.cache-cypress.outputs.cache-hit != 'true'
        run: |
          meteor npm install
          cd ./ee/server/services
          npm install
          cd -
      - run: meteor npm run lint

      - run: meteor npm run translation-check

      - name: TS typecheck
        run: |
          meteor npm run typecheck
          cd ./ee/server/services
          meteor npm run typecheck
          
      - name: Reset Meteor
        if: startsWith(github.ref, 'refs/tags/') == 'true' || github.ref == 'refs/heads/develop'
        run: |
          meteor reset
      
      - name: Build Rocket.Chat
        # if: startsWith(github.ref, 'refs/pull/') != true
        run: |
          meteor build --server-only --directory /tmp/build-test
          
      - name: Prepare build
        run: |
          cd /tmp/build-test
          tar czf /tmp/build-test/Rocket.Chat.tar.gz bundle
          cd /tmp/build-test/bundle/programs/server
          npm install --production
          cd /tmp
          tar czf Rocket.Chat.test.tar.gz ./build-test
          
      - name: Unpack build and prepare Docker files
        run: |
          cd /tmp/build-test
          tar xzf Rocket.Chat.tar.gz
          rm Rocket.Chat.tar.gz
          DOCKER_PATH="${GITHUB_WORKSPACE}/.docker"
          DOCKERFILE_PATH="${DOCKER_PATH}/Dockerfile"
          
          echo "Copy Dockerfile for release: ${{ matrix.release }}"
          cp $DOCKERFILE_PATH ./Dockerfile
          
      - name: Build Docker image for tag
        #if: github.event_name == 'release'
        run: |
          cd /tmp/build-test
                    
          # append the variant name to docker tag
                              
          echo "IMAGE_NAME: $IMAGE_NAME"
          echo "DOCKER_TAG: $DOCKER_TAG"
                    
          # build and push the specific tag version
          docker build -t $IMAGE_NAME:$DOCKER_TAG .
          docker images       
          #docker tag $IMAGE_NAME:$DOCKER_TAG gcr.io/hale-carport-345014/RocketChat
          #docker push gcr.io/hale-carport-345014/RocketChat
        env: 
         IMAGE_NAME: "rocket.chat"
         DOCKER_TAG: $GITHUB_SHA
        
          
      - uses: raccoondev/push-docker-gcr@v1
        with:
         gcr_host: gcr.io
         image_name: ${{ env.IMAGE_NAME }}
         image_tag: ${{ env.DOCKER_TAG }}
        env:
           GCLOUD_SERVICE_KEY: ${{ secrets.SERVICE_ACCOUNT_KEY }}
           GOOGLE_PROJECT_ID: "prod-345015"
           IMAGE_NAME: "rocket.chat"
           DOCKER_TAG: $GITHUB_SHA
